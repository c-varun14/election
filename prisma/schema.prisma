generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Election {
  id         String      @id @default(cuid())
  title      String
  students   Student[]
  teachers   Teacher[]
  candidates Candidate[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user Admin @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         Admin    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Admin {
  id            String    @id @default(cuid())
  username      String
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Teacher {
  email    String @id @unique
  name     String
  password String

  votes     TeacherVote[]
  elections Election[]

  @@index([email])
}

model Student {
  id        String     @id @unique @default(uuid())
  name      String
  house     String
  std       String
  section   String
  rollNo    Int
  candidate Candidate?
  votes     Vote[]
  Elections Election[]

  @@index([std, section, rollNo])
}

model Candidate {
  id           String        @id @unique @default(uuid())
  student      Student       @relation(fields: [studentId], references: [id])
  studentId    String        @unique
  ministry     String
  studentVotes Vote[]
  teacherVotes TeacherVote[]
  elections    Election[]

  @@index([ministry])
}

model Vote {
  id          String    @id @unique @default(uuid())
  to          Candidate @relation(fields: [candidateId], references: [id])
  candidateId String
  by          Student   @relation(fields: [voterId], references: [id])
  voterId     String

  @@unique([candidateId, voterId])
  @@index([candidateId])
  @@index([voterId])
}

model TeacherVote {
  id          String    @id @unique @default(uuid())
  to          Candidate @relation(fields: [candidateId], references: [id])
  candidateId String
  by          Teacher   @relation(fields: [voterEmail], references: [email])
  voterEmail  String

  @@index([voterEmail])
  @@index([candidateId])
}

enum House {
  ETON
  OXFORD
  LEEDS
  HARROW
}
